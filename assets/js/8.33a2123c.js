(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{164:function(t,e,r){"use strict";r.r(e);var s=r(0),n=Object(s.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),r("p",[t._v("而 Vuex 的产生就是为了解决这些问题的。它将组件的共享状态抽取出来，以一个全局单例模式管理，并且不管在任何组件，都能获取状态或触发行为。Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。但是 Vuex约定，改变 store 中的状态的唯一途径就是显式地"),r("strong",[t._v("提交 (commit) mutation")]),t._v("。但是\n由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。Vuex 允许我们将 store 分割成"),r("strong",[t._v("模块（module）")]),t._v("。这些话都是摘自于 "),r("a",{attrs:{href:"https://vuex.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vuex官网"),r("OutboundLink")],1),t._v("，但是看了这些介绍之后，我的内心是有一些疑问的。")]),t._v(" "),t._m(3),t._v(" "),t._m(4)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"vuex-做了什么（必读）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex-做了什么（必读）","aria-hidden":"true"}},[this._v("#")]),this._v(" Vuex 做了什么（必读）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("众所周知，当我们的应用遇到"),e("strong",[this._v("多个组件共享状态")]),this._v("时，处理这些问题可能变得比较繁琐。如以下例子：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("多层嵌套组件依赖同一个状态，通过传参的方式比较繁琐，并且对于兄弟组件间的状态传递无能为力。")]),this._v(" "),e("li",[this._v("不同组件对于同一状态都需要进行变更。")])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ol",[r("li",[r("strong",[t._v("Store 类是怎么设计的？内部的结构以及实例化的对象是怎样的结构")])]),t._v(" "),r("li",[r("strong",[t._v("为什么任何组件都能访问到 Store 单例？")])]),t._v(" "),r("li",[r("strong",[t._v("Store 是怎么实现响应式的？")])]),t._v(" "),r("li",[r("strong",[t._v("Vuex 怎么约束我们只能显式地提交 (commit) mutation去修改 Store 的状态的呢？")])]),t._v(" "),r("li",[r("strong",[t._v("Store 分割成 module 是怎么实现的。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("那么带着这些疑问，跟随着我的脚步，一步步探索 Vuex（版本3.0.1） 的源码。在此过程中，希望你对 Vue 的一些核心概念，比如"),e("strong",[this._v("Vue 组件化的实现，响应式原理的实现、插件的安装")]),this._v("等等有一些了解，不过我也会稍微详解下这一部分对原理。由于才疏学浅，如有错误，希望指正，互相学习！")])}],!1,null,null,null);n.options.__file="origin.md";e.default=n.exports}}]);